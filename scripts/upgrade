#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get $app domain)
path_url=$(ynh_app_setting_get $app path)
final_path=$(ynh_app_setting_get $app final_path)
statedir=$(ynh_app_setting_get $app statedir)
final_logpath=$(ynh_app_setting_get $app final_logpath)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set $app is_public 1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set $app is_public 0
	is_public=0
fi

# If db_name doesn't exist, create it
if [ -z $db_name ]; then
	db_name=$(ynh_sanitize_dbid $app)
	ynh_app_setting_set $app db_name $db_name
fi

# If final_path doesn't exist, create it
if [ -z $final_path ]; then
	final_path=/var/www/$app
	ynh_app_setting_set $app final_path $final_path
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
path_url=$(ynh_normalize_url_path $path_url)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================

ynh_install_app_dependencies php-soap php5-imap libawl-php php5-xsl

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a dedicated user (if not existing)
ynh_system_user_create $app

#=================================================
# PHP-FPM CONFIGURATION
#=================================================

# Create a dedicated php-fpm config
ynh_add_fpm_config

#=================================================
# SPECIFIC UPGRADE
#=================================================
# ...
#=================================================
z-push-admin -a fixstates
# Configuration
sed -i "s^define('TIMEZONE', .*^define('TIMEZONE', '$(cat /etc/timezone)');^" ../conf/config.php
sed -i "s@LOGTOCHANGE@$final_logpath@g" ../conf/config.php

# Storage of state_dir in /home/yunohost.app
# This contains the sync status in between device and z-push
sed -i "s@STATEDIRTOCHANGE@$statedir@g" ../conf/config.php
sudo mkdir -p $statedir
sudo chown -R www-data:www-data $statedir
# Note : there is a "fixstates actions done after the sources have been installed and configured

# Enable caldav carddav support
if sudo yunohost app list --installed -f baikal | grep -q id ; then
        echo "Detected Baikal"
        caldavdomain=$(ynh_app_setting_get baikal domain)
        caldavpath=$(ynh_app_setting_get baikal path)
        caldavpath=${caldavpath%/}

        # Configuration of backend
        sed -i "s@BACKENDTOCHANGE@BackendCombined@g" ../conf/config.php

        # Configuration baikal
        sed -i "s@BAIKALDOMAIN@$caldavdomain@g" ../conf/backend/config*.php
        sed -i "s@BAIKALPATH@$caldavpath@g" ../conf/backend/config*.php
        sed -i "s@DOMAINTOCHANGE@$domain@g" ../conf/backend/config-imap.php
        sed -i "s@FLAGTOCHANGE@true@g" ../conf/backend/config-imap.php

        # Copy config
        sudo cp ../conf/config.php $final_path/config.php
        sudo cp ../conf/backend/config-imap.php $final_path/backend/imap/config.php
        sudo cp ../conf/backend/config-carddav.php $final_path/backend/carddav/config.php
        sudo cp ../conf/backend/config-caldav.php $final_path/backend/caldav/config.php
        sudo cp ../conf/backend/config-combined.php $final_path/backend/combined/config.php
else
        # Configuration of backend
        sed -i "s@BACKENDTOCHANGE@BackendIMAP@g" ../conf/config.php

        # Copy config
        sudo cp ../conf/config.php $final_path/config.php
        sed -i "s@DOMAINTOCHANGE@$domain@g" ../conf/backend/config-imap.php
        sed -i "s@FLAGTOCHANGE@false@g" ../conf/backend/config-imap.php
        sudo cp ../conf/backend/config-imap.php $final_path/backend/imap/config.php

fi

# Set permissions to z-push directory
sudo chown -R www-data: $final_path

# Create log directory
sudo mkdir -p $final_logpath
sudo chmod 750 $final_logpath
sudo chown www-data:www-data $final_logpath

#Copy XMLElement.php
sudo ln -s /usr/share/awl/inc/XML* /var/www/z-push/include/

# Fixstates to avoid full resync of devices after version upgrades
sudo $final_path/z-push-admin.php -a fixstates

### Verify the checksum of a file, stored by `ynh_store_file_checksum` in the install script.
### And create a backup of this file if the checksum is different. So the file will be backed up if the admin had modified it.
ynh_backup_if_checksum_is_different "$final_path/config.php"
# Recalculate and store the checksum of the file for the next upgrade.
ynh_store_file_checksum "$final_path/config.php"

#=================================================
# SETUP LOGROTATE
#=================================================

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# SETUP SYSTEMD
#=================================================

# Create a dedicated systemd config
#ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions on app files
chown -R root: $final_path

#=================================================
# SETUP SSOWAT
#=================================================

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway
	ynh_app_setting_set $app unprotected_uris "/"
fi

#=================================================
# RELOAD NGINX
#=================================================

systemctl reload nginx



