#!/bin/bash

# Active trap pour arrêter le script si une erreur est détectée.
EXIT_PROPERLY () {      # Provoque l'arrêt du script en cas d'erreur. Et nettoye les résidus.
        exit_code=$?
        if [ "$exit_code" -eq 0 ]; then
                        exit 0  # Quitte sans erreur si le script se termine correctement.
        fi
        trap '' EXIT
        set +eu
        echo -e "\e[91m \e[1m"  # Shell in light red bold
        echo -e "!!\n  $app install's script has encountered an error. Installation was cancelled.\n!!" >&2

        if type -t CLEAN_SETUP > /dev/null; then        # Vérifie l'existance de la fonction avant de l'exécuter.
                CLEAN_SETUP     # Appel la fonction de nettoyage spécifique du script install.
        fi

        # Compense le bug de ssowat qui ne supprime pas l'entrée de l'app en cas d'erreur d'installation.
        sudo sed -i "\@\"$domain$path/\":@d" /etc/ssowat/conf.json

        ynh_die
}

TRAP_ON () {    # Activate signal capture
        set -eu # Exit if a command fail, and if a variable is used unset.
        trap EXIT_PROPERLY EXIT # Capturing exit signals on shell script
}

TRAP_ON

# Source app helpers
source /usr/share/yunohost/helpers

# Retrieve arguments
app=$YNH_APP_INSTANCE_NAME
domain=$YNH_APP_ARG_DOMAIN
path=$YNH_APP_ARG_PATH

# We check variables are not empty
CHECK_VAR () {  # Vérifie que la variable n'est pas vide.
# $1 = Variable à vérifier
# $2 = Texte à afficher en cas d'erreur
        test -n "$1" || (echo "$2" >&2 && false)
}

CHECK_VAR "$app" "app name not set"

# Check the path value and correct it (adds / at begining and removes it at the end)
CHECK_PATH () { # Vérifie la présence du / en début de path. Et son absence à la fin.
        if [ "${path:0:1}" != "/" ]; then    # Si le premier caractère n'est pas un /
                path="/$path"    # Ajoute un / en début de path
        fi
        if [ "${path:${#path}-1}" == "/" ] && [ ${#path} -gt 1 ]; then    # Si le dernier caractère est un / et que ce n'est pas l$
                path="${path:0:${#path}-1}"     # Supprime le dernier caractère
        fi
}

CHECK_PATH;

# Check domain and path availibility
CHECK_DOMAINPATH () {   # Vérifie la disponibilité du path et du domaine.
        sudo yunohost app checkurl $domain$path -a $app
}

CHECK_DOMAINPATH

# Prereqs
sudo apt-get install php-soap php5-imap libawl-php php5-xsl -y

final_path="/var/www/$app"

CHECK_FINALPATH () {    # Vérifie que le dossier de destination n'est pas déjà utilisé.
        if [ -e "$final_path" ]
        then
                echo "This path already contains a folder" >&2
                false
        fi
}

CHECK_FINALPATH



# Define variables and Save app settings
ynh_app_setting_set "$app" domain "$domain"
ynh_app_setting_set "$app" final_path "$final_path"

final_logpath="/var/log/$app"
ynh_app_setting_set "$app" final_logpath "$final_logpath"

final_nginxconf="/etc/nginx/conf.d/${domain}.d/${app}.conf"
ynh_app_setting_set "$app" final_nginxconf "$final_nginxconf"

final_phpconf="/etc/php5/fpm/pool.d/${app}.conf"
ynh_app_setting_set "$app" final_phpconf "$final_phpconf"

# Copy files to the right place
sudo mkdir -p $final_path

# We download the sources and check the md5sum
SFILE=`sudo cat ../sources/source_file`;
sudo wget -nv -i ../sources/source_url -O $SFILE
sudo md5sum -c ../sources/source_md5 --status || (echo "Corrupt source" >&2 && false)
sudo tar xv $SFILE -d ../sources/
sudo cp -R ../sources/$SFILE/* $final_path

# Configuration
sed -i "s^define('TIMEZONE', .*^define('TIMEZONE', '$(cat /etc/timezone)');^" ../conf/config.php
sed -i "s@ALIASTOCHANGE@$final_path@g" ../conf/config.php
sed -i "s@LOGTOCHANGE@$final_logpath@g" ../conf/config.php

# Enable caldav carddav support
if sudo yunohost app list --installed -f baikal | grep -q id ; then
	echo "Detected Baikal"
	caldavdomain=$(ynh_app_setting_get baikal domain)
	caldavpath=$(ynh_app_setting_get baikal path)
	caldavpath=${caldavpath%/}

	# Configuration of backend
	sed -i "s@BACKENDTOCHANGE@BackendCombined@g" ../conf/config.php

	# Configuration baikal
	sed -i "s@BAIKALDOMAIN@$caldavdomain@g" ../conf/backend/config*.php
	sed -i "s@BAIKALPATH@$caldavpath@g" ../conf/backend/config*.php
	sed -i "s@DOMAINTOCHANGE@$domain@g" ../conf/backend/config-imap.php
	sed -i "s@FLAGTOCHANGE@true@g" ../conf/backend/config-imap.php

	# Copy config
	sudo cp ../conf/config.php $final_path/config.php
	sudo cp ../conf/backend/config-imap.php $final_path/backend/imap/config.php
	sudo cp ../conf/backend/config-carddav.php $final_path/backend/carddav/config.php
	sudo cp ../conf/backend/config-caldav.php $final_path/backend/caldav/config.php
	sudo cp ../conf/backend/config-combined.php $final_path/backend/combined/config.php
else
	# Configuration of backend
	sed -i "s@BACKENDTOCHANGE@BackendIMAP@g" ../conf/config.php

	# Copy config
	sudo cp ../conf/config.php $final_path/config.php
	sed -i "s@DOMAINTOCHANGE@$domain@g" ../conf/backend/config-imap.php
	sed -i "s@FLAGTOCHANGE@false@g" ../conf/backend/config-imap.php
	sudo cp ../conf/backend/config-imap.php $final_path/backend/imap/config.php

fi

# Set permissions to z-push directory
sudo chown -R www-data: $final_path

# Create log directory
sudo mkdir -p $final_logpath
sudo chmod 750 $final_logpath
sudo chown www-data:www-data $final_logpath

#Copy XMLElement.php
sudo ln -s /usr/share/awl/inc/XML* /var/www/$app/include/

# Modify Nginx configuration file and copy it to Nginx conf directory
sudo sed -i "s@ALIASTOCHANGE@$final_path/@g" ../conf/nginx.conf
sudo sed -i "s@NAMETOCHANGE@$app@g" ../conf/nginx.conf
sudo cp ../conf/nginx.conf $final_nginxconf

# Dedicated php-fpm processes
sudo sed -i "s@NAMETOCHANGE@$app@g" ../conf/php-fpm.conf
sudo cp ../conf/php-fpm.conf $final_phpconf
sudo chown root: $final_phpconf
sudo chmod 644 $final_phpconf

# Enable api for client and make app public
ynh_app_setting_set $app skipped_uris "/"

# Reload Nginx and regenerate SSOwat conf
sudo service php5-fpm reload
sudo service nginx reload
sudo yunohost app ssowatconf
